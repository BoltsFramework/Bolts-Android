apply plugin: 'java'

group = GROUP_NAME
version = VERSION_NAME

configurations {
    provided
}

sourceSets {
    main {
        compileClasspath += configurations.provided
    }
}

dependencies {
    provided 'com.google.android:android:4.1.1.4'
    testImplementation 'junit:junit:4.12'
}

//region Maven

apply plugin: 'maven'
apply plugin: 'signing'

def isSnapshot = version.endsWith('-SNAPSHOT')
def ossrhUsername = hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : System.getenv('CI_NEXUS_USERNAME')
def ossrhPassword = hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : System.getenv('CI_NEXUS_PASSWORD')

uploadArchives {
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
            authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
            authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        pom.project {
            name 'Bolts-Tasks'
            artifactId = 'bolts-tasks'
            packaging 'jar'
            description 'Bolts is a collection of low-level libraries designed to make developing mobile apps easier.'
            url 'https://github.com/BoltsFramework/Bolts-Android'

            scm {
                connection 'scm:git@github.com:BoltsFramework/Bolts-Android.git'
                developerConnection 'scm:git@github.com:BoltsFramework/Bolts-Android.git'
                url 'https://github.com/BoltsFramework/Bolts-Android'
            }

            licenses {
                license {
                    name 'MIT License'
                    url 'https://github.com/BoltsFramework/Bolts-Android/blob/master/LICENSE'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'parse'
                    name 'Parse'
                }
            }
        }
    }
}

signing {
    required { !isSnapshot && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

javadoc.options.addStringOption('Xdoclint:none', '-quiet')

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar (type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

//endregion

//region Code Coverage

apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.7.1.201405082137'
}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled true
        html.enabled true
    }
}

//endregion
